generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id                  String     @default(cuid()) @id
  title               String
  content             String?
  published           Boolean @default(false)
  author              User?   @relation(fields: [authorId], references: [id])
  authorId            String?
  
  @@map("posts")
}

model User {
  id                  String         @id @default(uuid())
  name                String
  email               String?        @unique
  emailVerified       DateTime?      @map("email_verified")
  image               String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  posts               Post[]
  accounts            Account[]
  sessions            Session[]
  mobile              String?

  @@map("users")
}

model Account {
  id                  String    @id @default(cuid())
  userId              String    @map("user_id")
  type                String?
  provider            String
  providerAccountId   String?    @map("provider_account_id")
  token_type          String?
  refresh_token       String?   @db.Text
  access_token        String?   @db.Text
  expires_at          Int?
  scope               String?
  id_token            String?   @db.Text
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  login               String?
  password            String?

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id                  String   @id @default(cuid())
  userId              String?  @map("user_id")
  sessionToken        String   @db.Text @map("session_token") @unique
  accessToken         String?  @db.Text @map("access_token")
  expires             DateTime
  user                User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id                  String   @id @default(cuid())
  identifier          String
  token               String   @unique
  expires             DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([identifier, token])
  @@map("verification_requests")
}